// Cart functionality
let cart = [];
let cartCount = 0;
let cartTotal = 0;

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeNavigation();
    initializeCart();
    initializeAnimations();
    initializeModals();
    loadCartFromStorage();
});

// Navigation functionality
function initializeNavigation() {
    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
        });
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Header background on scroll
    const header = document.getElementById('header');
    if (header) {
        window.addEventListener('scroll', function() {
            if (window.scrollY > 100) {
                header.style.background = 'rgba(0, 0, 0, 0.95)';
                header.style.backdropFilter = 'blur(10px)';
            } else {
                header.style.background = 'transparent';
                header.style.backdropFilter = 'none';
            }
        });
    }
}

// Cart functionality
function initializeCart() {
    const cartButton = document.getElementById('cart-button');
    const cartSidebar = document.getElementById('cart-sidebar');
    const closeCart = document.getElementById('close-cart');
    const checkoutButton = document.getElementById('checkout-button');
    const checkoutModal = document.getElementById('checkout-modal');
    const closeCheckout = document.getElementById('close-checkout');
    const checkoutOverlay = document.getElementById('checkout-overlay');

    // Open cart sidebar
    if (cartButton && cartSidebar) {
        cartButton.addEventListener('click', function() {
            cartSidebar.classList.remove('translate-x-full');
        });
    }

    // Close cart sidebar
    if (closeCart && cartSidebar) {
        closeCart.addEventListener('click', function() {
            cartSidebar.classList.add('translate-x-full');
        });
    }

    // Open checkout modal
    if (checkoutButton && checkoutModal) {
        checkoutButton.addEventListener('click', function() {
            if (cart.length > 0) {
                updateCheckoutSummary();
                checkoutModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            } else {
                showAlert('Your cart is empty!', 'error');
            }
        });
    }

    // Close checkout modal
    function closeCheckoutModal() {
        if (checkoutModal) {
            checkoutModal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    }

    if (closeCheckout) {
        closeCheckout.addEventListener('click', closeCheckoutModal);
    }

    if (checkoutOverlay) {
        checkoutOverlay.addEventListener('click', closeCheckoutModal);
    }

    // Add to cart buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('add-to-cart') || e.target.closest('.add-to-cart')) {
            const button = e.target.classList.contains('add-to-cart') ? e.target : e.target.closest('.add-to-cart');
            addToCart(button);
        }
    });

    // Checkout form
    const checkoutForm = document.getElementById('checkout-form');
    if (checkoutForm) {
        checkoutForm.addEventListener('submit', function(e) {
            e.preventDefault();
            processOrder();
        });
    }

    // Order type radio buttons
    const orderTypeRadios = document.querySelectorAll('input[name="order-type"]');
    const deliveryDetails = document.getElementById('delivery-details');
    
    orderTypeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'delivery') {
                deliveryDetails.classList.remove('hidden');
            } else {
                deliveryDetails.classList.add('hidden');
            }
        });
    });

    // Use location button
    const useLocationButton = document.getElementById('use-location');
    if (useLocationButton) {
        useLocationButton.addEventListener('click', function() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    // In a real app, you'd reverse geocode these coordinates
                    const addressField = document.getElementById('address');
                    if (addressField) {
                        addressField.value = `Lat: ${position.coords.latitude.toFixed(4)}, Lng: ${position.coords.longitude.toFixed(4)}`;
                    }
                    showAlert('Location detected!', 'success');
                }, function() {
                    showAlert('Unable to detect location', 'error');
                });
            } else {
                showAlert('Geolocation is not supported by this browser', 'error');
            }
        });
    }
}

// Add item to cart
function addToCart(button) {
    const id = button.getAttribute('data-id');
    const name = button.getAttribute('data-name');
    const price = parseFloat(button.getAttribute('data-price'));
    const image = button.getAttribute('data-image');

    // Check if item already exists in cart
    const existingItem = cart.find(item => item.id === id);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            id: id,
            name: name,
            price: price,
            image: image,
            quantity: 1
        });
    }

    updateCartUI();
    saveCartToStorage();
    showAlert(`${name} added to cart!`, 'success');
    
    // Add animation to button
    button.style.transform = 'scale(0.95)';
    setTimeout(() => {
        button.style.transform = 'scale(1)';
    }, 150);
}

// Update cart UI
function updateCartUI() {
    cartCount = cart.reduce((total, item) => total + item.quantity, 0);
    cartTotal = cart.reduce((total, item) => total + (item.price * item.quantity), 0);

    // Update cart count
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = cartCount;
    }

    // Update cart subtotal
    const cartSubtotal = document.getElementById('cart-subtotal');
    if (cartSubtotal) {
        cartSubtotal.textContent = `$${cartTotal.toFixed(2)}`;
    }

    // Update cart items
    updateCartItems();
}

// Update cart items display
function updateCartItems() {
    const cartItemsContainer = document.getElementById('cart-items');
    if (!cartItemsContainer) return;

    if (cart.length === 0) {
        cartItemsContainer.innerHTML = `
            <div class="empty-cart text-center py-10">
                <div class="w-16 h-16 mx-auto mb-4 text-gray-500">
                    <i class="ri-shopping-cart-line ri-3x"></i>
                </div>
                <p class="text-gray-400">Your cart is empty</p>
                <button class="mt-4 px-6 py-2 bg-primary text-white rounded-button hover:bg-opacity-90 transition-all">Browse Menu</button>
            </div>
        `;
    } else {
        cartItemsContainer.innerHTML = cart.map(item => `
            <div class="cart-item flex items-center space-x-4 p-4 bg-gray-900 rounded-lg mb-4">
                <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
                <div class="flex-1">
                    <h4 class="font-medium text-white">${item.name}</h4>
                    <p class="text-primary font-medium">$${item.price.toFixed(2)}</p>
                </div>
                <div class="flex items-center space-x-2">
                    <button class="quantity-btn minus w-8 h-8 bg-gray-800 text-white rounded-full hover:bg-gray-700 transition-colors" data-id="${item.id}">-</button>
                    <span class="text-white font-medium w-8 text-center">${item.quantity}</span>
                    <button class="quantity-btn plus w-8 h-8 bg-gray-800 text-white rounded-full hover:bg-gray-700 transition-colors" data-id="${item.id}">+</button>
                </div>
                <button class="remove-item text-red-500 hover:text-red-400 transition-colors" data-id="${item.id}">
                    <i class="ri-delete-bin-line"></i>
                </button>
            </div>
        `).join('');

        // Add event listeners for quantity buttons and remove buttons
        cartItemsContainer.addEventListener('click', function(e) {
            const itemId = e.target.getAttribute('data-id') || e.target.closest('[data-id]')?.getAttribute('data-id');
            
            if (e.target.classList.contains('minus') || e.target.closest('.minus')) {
                updateQuantity(itemId, -1);
            } else if (e.target.classList.contains('plus') || e.target.closest('.plus')) {
                updateQuantity(itemId, 1);
            } else if (e.target.classList.contains('remove-item') || e.target.closest('.remove-item')) {
                removeFromCart(itemId);
            }
        });
    }
}

// Update item quantity
function updateQuantity(itemId, change) {
    const item = cart.find(item => item.id === itemId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(itemId);
        } else {
            updateCartUI();
            saveCartToStorage();
        }
    }
}

// Remove item from cart
function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    updateCartUI();
    saveCartToStorage();
    showAlert('Item removed from cart', 'info');
}

// Update checkout summary
function updateCheckoutSummary() {
    const checkoutItems = document.getElementById('checkout-items');
    const checkoutSubtotal = document.getElementById('checkout-subtotal');
    const checkoutDelivery = document.getElementById('checkout-delivery');
    const checkoutTotal = document.getElementById('checkout-total');

    if (checkoutItems) {
        checkoutItems.innerHTML = cart.map(item => `
            <div class="flex justify-between items-center">
                <div>
                    <span class="text-white">${item.name}</span>
                    <span class="text-gray-400 ml-2">x${item.quantity}</span>
                </div>
                <span class="text-white">$${(item.price * item.quantity).toFixed(2)}</span>
            </div>
        `).join('');
    }

    const deliveryFee = 5.00;
    const total = cartTotal + deliveryFee;

    if (checkoutSubtotal) checkoutSubtotal.textContent = `$${cartTotal.toFixed(2)}`;
    if (checkoutDelivery) checkoutDelivery.textContent = `$${deliveryFee.toFixed(2)}`;
    if (checkoutTotal) checkoutTotal.textContent = `$${total.toFixed(2)}`;
}

// Process order
function processOrder() {
    const formData = new FormData(document.getElementById('checkout-form'));
    const orderData = {
        items: cart,
        customer: {
            name: formData.get('name'),
            phone: formData.get('phone'),
            orderType: formData.get('order-type'),
            address: formData.get('address'),
            notes: formData.get('notes')
        },
        total: cartTotal + 5.00
    };

    // Simulate order processing
    showAlert('Processing your order...', 'info');
    
    setTimeout(() => {
        // Clear cart
        cart = [];
        updateCartUI();
        saveCartToStorage();
        
        // Close modals
        document.getElementById('checkout-modal').classList.add('hidden');
        document.getElementById('cart-sidebar').classList.add('translate-x-full');
        document.body.style.overflow = 'auto';
        
        showAlert('Order placed successfully! We\'ll contact you soon.', 'success');
    }, 2000);
}

// Save cart to localStorage
function saveCartToStorage() {
    localStorage.setItem('pokytosCart', JSON.stringify(cart));
}

// Load cart from localStorage
function loadCartFromStorage() {
    const savedCart = localStorage.getItem('pokytosCart');
    if (savedCart) {
        cart = JSON.parse(savedCart);
        updateCartUI();
    }
}

// Show alert
function showAlert(message, type = 'info') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert ${type}`;
    alertDiv.innerHTML = `
        <div class="flex items-center space-x-2">
            <i class="ri-${type === 'success' ? 'check' : type === 'error' ? 'error-warning' : 'information'}-line"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Show alert
    setTimeout(() => alertDiv.classList.add('show'), 100);
    
    // Hide alert after 3 seconds
    setTimeout(() => {
        alertDiv.classList.add('hide');
        setTimeout(() => alertDiv.remove(), 300);
    }, 3000);
}

// Initialize animations
function initializeAnimations() {
    // Counter animation
    const counters = document.querySelectorAll('.counter-value');
    const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
    };

    const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateCounter(entry.target);
                counterObserver.unobserve(entry.target);
            }
        });
    }, observerOptions);

    counters.forEach(counter => {
        counterObserver.observe(counter);
    });

    // GSAP animations
    if (typeof gsap !== 'undefined') {
        // Hero section animation
        gsap.from('.hero-content h1', {
            duration: 1,
            y: 50,
            opacity: 0,
            ease: 'power3.out'
        });

        gsap.from('.hero-content p', {
            duration: 1,
            y: 30,
            opacity: 0,
            delay: 0.3,
            ease: 'power3.out'
        });

        gsap.from('.hero-content .flex', {
            duration: 1,
            y: 30,
            opacity: 0,
            delay: 0.6,
            ease: 'power3.out'
        });

        // Menu items animation
        gsap.registerPlugin(ScrollTrigger);
        
        gsap.utils.toArray('.menu-item').forEach((item, index) => {
            gsap.from(item, {
                duration: 0.8,
                y: 50,
                opacity: 0,
                delay: index * 0.1,
                ease: 'power3.out',
                scrollTrigger: {
                    trigger: item,
                    start: 'top 80%',
                    end: 'bottom 20%',
                    toggleActions: 'play none none reverse'
                }
            });
        });
    }
}

// Animate counter
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-target'));
    const duration = 2000;
    const step = target / (duration / 16);
    let current = 0;

    const timer = setInterval(() => {
        current += step;
        if (current >= target) {
            current = target;
            clearInterval(timer);
        }
        element.textContent = Math.floor(current).toLocaleString();
    }, 16);
}

// Initialize modals
function initializeModals() {
    // Menu choice modal functionality
    window.showMenuChoice = function() {
        const modal = document.createElement('div');
        modal.className = 'modal show';
        modal.innerHTML = `
            <div class="modal-content">
                <h3 class="text-2xl font-bold mb-6 gradient-text">Choose Your Menu</h3>
                <p class="text-gray-300 mb-8">What would you like to explore?</p>
                <div class="flex flex-col space-y-4">
                    <button onclick="navigateToMenu('food')" class="px-8 py-3 bg-primary text-white rounded-button hover:bg-opacity-90 transition-all font-medium">
                        <i class="ri-restaurant-line mr-2"></i>Food Menu
                    </button>
                    <button onclick="navigateToMenu('drinks')" class="px-8 py-3 bg-secondary text-white rounded-button hover:bg-opacity-90 transition-all font-medium">
                        <i class="ri-cup-line mr-2"></i>Drinks Menu
                    </button>
                    <button onclick="closeModal()" class="px-8 py-3 bg-gray-600 text-white rounded-button hover:bg-gray-500 transition-all font-medium">
                        Cancel
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        document.body.style.overflow = 'hidden';
        
        // Close modal when clicking outside
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeModal();
            }
        });
    };

    window.navigateToMenu = function(type) {
        closeModal();
        // Add page transition effect
        const transition = document.createElement('div');
        transition.className = 'page-transition active';
        document.body.appendChild(transition);
        
        setTimeout(() => {
            if (type === 'food') {
                window.location.href = 'food-menu.html';
            } else {
                window.location.href = 'drinks-menu.html';
            }
        }, 250);
    };

    window.closeModal = function() {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
                document.body.style.overflow = 'auto';
            }, 300);
        }
    };
}

// Tab functionality for menu sections
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Remove active class from all buttons
            tabButtons.forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            this.classList.add('active');
            
            // Hide all tab contents
            tabContents.forEach(content => content.classList.add('hidden'));
            
            // Show selected tab content
            const targetContent = document.getElementById(`${tabId}-tab`);
            if (targetContent) {
                targetContent.classList.remove('hidden');
            }
        });
    });
}

// Initialize tabs when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
});// Cart functionality
let cart = [];
let cartCount = 0;
let cartTotal = 0;

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeNavigation();
    initializeCart();
    initializeAnimations();
    initializeModals();
    loadCartFromStorage();
});

// Navigation functionality
function initializeNavigation() {
    // Mobile menu toggle
    const mobileMenuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    
    if (mobileMenuButton && mobileMenu) {
        mobileMenuButton.addEventListener('click', function() {
            mobileMenu.classList.toggle('hidden');
        });
    }

    // Smooth scrolling for navigation links
    document.querySelectorAll('a[href^="#"]').forEach(anchor => {
        anchor.addEventListener('click', function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute('href'));
            if (target) {
                target.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start'
                });
            }
        });
    });

    // Header background on scroll
    const header = document.getElementById('header');
    if (header) {
        window.addEventListener('scroll', function() {
            if (window.scrollY > 100) {
                header.style.background = 'rgba(0, 0, 0, 0.95)';
                header.style.backdropFilter = 'blur(10px)';
            } else {
                header.style.background = 'transparent';
                header.style.backdropFilter = 'none';
            }
        });
    }
}

// Cart functionality
function initializeCart() {
    const cartButton = document.getElementById('cart-button');
    const cartSidebar = document.getElementById('cart-sidebar');
    const closeCart = document.getElementById('close-cart');
    const checkoutButton = document.getElementById('checkout-button');
    const checkoutModal = document.getElementById('checkout-modal');
    const closeCheckout = document.getElementById('close-checkout');
    const checkoutOverlay = document.getElementById('checkout-overlay');

    // Open cart sidebar
    if (cartButton && cartSidebar) {
        cartButton.addEventListener('click', function() {
            cartSidebar.classList.remove('translate-x-full');
        });
    }

    // Close cart sidebar
    if (closeCart && cartSidebar) {
        closeCart.addEventListener('click', function() {
            cartSidebar.classList.add('translate-x-full');
        });
    }

    // Open checkout modal
    if (checkoutButton && checkoutModal) {
        checkoutButton.addEventListener('click', function() {
            if (cart.length > 0) {
                updateCheckoutSummary();
                checkoutModal.classList.remove('hidden');
                document.body.style.overflow = 'hidden';
            } else {
                showAlert('Your cart is empty!', 'error');
            }
        });
    }

    // Close checkout modal
    function closeCheckoutModal() {
        if (checkoutModal) {
            checkoutModal.classList.add('hidden');
            document.body.style.overflow = 'auto';
        }
    }

    if (closeCheckout) {
        closeCheckout.addEventListener('click', closeCheckoutModal);
    }

    if (checkoutOverlay) {
        checkoutOverlay.addEventListener('click', closeCheckoutModal);
    }

    // Add to cart buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('add-to-cart') || e.target.closest('.add-to-cart')) {
            const button = e.target.classList.contains('add-to-cart') ? e.target : e.target.closest('.add-to-cart');
            addToCart(button);
        }
    });

    // Checkout form
    const checkoutForm = document.getElementById('checkout-form');
    if (checkoutForm) {
        checkoutForm.addEventListener('submit', function(e) {
            e.preventDefault();
            processOrder();
        });
    }

    // Order type radio buttons
    const orderTypeRadios = document.querySelectorAll('input[name="order-type"]');
    const deliveryDetails = document.getElementById('delivery-details');
    
    orderTypeRadios.forEach(radio => {
        radio.addEventListener('change', function() {
            if (this.value === 'delivery') {
                deliveryDetails.classList.remove('hidden');
            } else {
                deliveryDetails.classList.add('hidden');
            }
        });
    });

    // Use location button
    const useLocationButton = document.getElementById('use-location');
    if (useLocationButton) {
        useLocationButton.addEventListener('click', function() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(function(position) {
                    // In a real app, you'd reverse geocode these coordinates
                    const addressField = document.getElementById('address');
                    if (addressField) {
                        addressField.value = `Lat: ${position.coords.latitude.toFixed(4)}, Lng: ${position.coords.longitude.toFixed(4)}`;
                    }
                    showAlert('Location detected!', 'success');
                }, function() {
                    showAlert('Unable to detect location', 'error');
                });
            } else {
                showAlert('Geolocation is not supported by this browser', 'error');
            }
        });
    }
}

// Add item to cart
function addToCart(button) {
    const id = button.getAttribute('data-id');
    const name = button.getAttribute('data-name');
    const price = parseFloat(button.getAttribute('data-price'));
    const image = button.getAttribute('data-image');

    // Check if item already exists in cart
    const existingItem = cart.find(item => item.id === id);
    
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push({
            id: id,
            name: name,
            price: price,
            image: image,
            quantity: 1
        });
    }

    updateCartUI();
    saveCartToStorage();
    showAlert(`${name} added to cart!`, 'success');
    
    // Add animation to button
    button.style.transform = 'scale(0.95)';
    setTimeout(() => {
        button.style.transform = 'scale(1)';
    }, 150);
}

// Update cart UI
function updateCartUI() {
    cartCount = cart.reduce((total, item) => total + item.quantity, 0);
    cartTotal = cart.reduce((total, item) => total + (item.price * item.quantity), 0);

    // Update cart count
    const cartCountElement = document.getElementById('cart-count');
    if (cartCountElement) {
        cartCountElement.textContent = cartCount;
    }

    // Update cart subtotal
    const cartSubtotal = document.getElementById('cart-subtotal');
    if (cartSubtotal) {
        cartSubtotal.textContent = `$${cartTotal.toFixed(2)}`;
    }

    // Update cart items
    updateCartItems();
}

// Update cart items display
function updateCartItems() {
    const cartItemsContainer = document.getElementById('cart-items');
    if (!cartItemsContainer) return;

    if (cart.length === 0) {
        cartItemsContainer.innerHTML = `
            <div class="empty-cart text-center py-10">
                <div class="w-16 h-16 mx-auto mb-4 text-gray-500">
                    <i class="ri-shopping-cart-line ri-3x"></i>
                </div>
                <p class="text-gray-400">Your cart is empty</p>
                <button class="mt-4 px-6 py-2 bg-primary text-white rounded-button hover:bg-opacity-90 transition-all">Browse Menu</button>
            </div>
        `;
    } else {
        cartItemsContainer.innerHTML = cart.map(item => `
            <div class="cart-item flex items-center space-x-4 p-4 bg-gray-900 rounded-lg mb-4">
                <img src="${item.image}" alt="${item.name}" class="w-16 h-16 object-cover rounded">
                <div class="flex-1">
                    <h4 class="font-medium text-white">${item.name}</h4>
                    <p class="text-primary font-medium">$${item.price.toFixed(2)}</p>
                </div>
                <div class="flex items-center space-x-2">
                    <button class="quantity-btn minus w-8 h-8 bg-gray-800 text-white rounded-full hover:bg-gray-700 transition-colors" data-id="${item.id}">-</button>
                    <span class="text-white font-medium w-8 text-center">${item.quantity}</span>
                    <button class="quantity-btn plus w-8 h-8 bg-gray-800 text-white rounded-full hover:bg-gray-700 transition-colors" data-id="${item.id}">+</button>
                </div>
                <button class="remove-item text-red-500 hover:text-red-400 transition-colors" data-id="${item.id}">
                    <i class="ri-delete-bin-line"></i>
                </button>
            </div>
        `).join('');

        // Add event listeners for quantity buttons and remove buttons
        cartItemsContainer.addEventListener('click', function(e) {
            const itemId = e.target.getAttribute('data-id') || e.target.closest('[data-id]')?.getAttribute('data-id');
            
            if (e.target.classList.contains('minus') || e.target.closest('.minus')) {
                updateQuantity(itemId, -1);
            } else if (e.target.classList.contains('plus') || e.target.closest('.plus')) {
                updateQuantity(itemId, 1);
            } else if (e.target.classList.contains('remove-item') || e.target.closest('.remove-item')) {
                removeFromCart(itemId);
            }
        });
    }
}

// Update item quantity
function updateQuantity(itemId, change) {
    const item = cart.find(item => item.id === itemId);
    if (item) {
        item.quantity += change;
        if (item.quantity <= 0) {
            removeFromCart(itemId);
        } else {
            updateCartUI();
            saveCartToStorage();
        }
    }
}

// Remove item from cart
function removeFromCart(itemId) {
    cart = cart.filter(item => item.id !== itemId);
    updateCartUI();
    saveCartToStorage();
    showAlert('Item removed from cart', 'info');
}

// Update checkout summary
function updateCheckoutSummary() {
    const checkoutItems = document.getElementById('checkout-items');
    const checkoutSubtotal = document.getElementById('checkout-subtotal');
    const checkoutDelivery = document.getElementById('checkout-delivery');
    const checkoutTotal = document.getElementById('checkout-total');

    if (checkoutItems) {
        checkoutItems.innerHTML = cart.map(item => `
            <div class="flex justify-between items-center">
                <div>
                    <span class="text-white">${item.name}</span>
                    <span class="text-gray-400 ml-2">x${item.quantity}</span>
                </div>
                <span class="text-white">$${(item.price * item.quantity).toFixed(2)}</span>
            </div>
        `).join('');
    }

    const deliveryFee = 5.00;
    const total = cartTotal + deliveryFee;

    if (checkoutSubtotal) checkoutSubtotal.textContent = `$${cartTotal.toFixed(2)}`;
    if (checkoutDelivery) checkoutDelivery.textContent = `$${deliveryFee.toFixed(2)}`;
    if (checkoutTotal) checkoutTotal.textContent = `$${total.toFixed(2)}`;
}

// Process order
function processOrder() {
    const formData = new FormData(document.getElementById('checkout-form'));
    const orderData = {
        items: cart,
        customer: {
            name: formData.get('name'),
            phone: formData.get('phone'),
            orderType: formData.get('order-type'),
            address: formData.get('address'),
            notes: formData.get('notes')
        },
        total: cartTotal + 5.00
    };

    // Simulate order processing
    showAlert('Processing your order...', 'info');
    
    setTimeout(() => {
        // Clear cart
        cart = [];
        updateCartUI();
        saveCartToStorage();
        
        // Close modals
        document.getElementById('checkout-modal').classList.add('hidden');
        document.getElementById('cart-sidebar').classList.add('translate-x-full');
        document.body.style.overflow = 'auto';
        
        showAlert('Order placed successfully! We\'ll contact you soon.', 'success');
    }, 2000);
}

// Save cart to localStorage
function saveCartToStorage() {
    localStorage.setItem('pokytosCart', JSON.stringify(cart));
}

// Load cart from localStorage
function loadCartFromStorage() {
    const savedCart = localStorage.getItem('pokytosCart');
    if (savedCart) {
        cart = JSON.parse(savedCart);
        updateCartUI();
    }
}

// Show alert
function showAlert(message, type = 'info') {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert ${type}`;
    alertDiv.innerHTML = `
        <div class="flex items-center space-x-2">
            <i class="ri-${type === 'success' ? 'check' : type === 'error' ? 'error-warning' : 'information'}-line"></i>
            <span>${message}</span>
        </div>
    `;
    
    document.body.appendChild(alertDiv);
    
    // Show alert
    setTimeout(() => alertDiv.classList.add('show'), 100);
    
    // Hide alert after 3 seconds
    setTimeout(() => {
        alertDiv.classList.add('hide');
        setTimeout(() => alertDiv.remove(), 300);
    }, 3000);
}

// Initialize animations
function initializeAnimations() {
    // Counter animation
    const counters = document.querySelectorAll('.counter-value');
    const observerOptions = {
        threshold: 0.5,
        rootMargin: '0px 0px -100px 0px'
    };

    const counterObserver = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                animateCounter(entry.target);
                counterObserver.unobserve(entry.target);
            }
        });
    }, observerOptions);

    counters.forEach(counter => {
        counterObserver.observe(counter);
    });

    // GSAP animations
    if (typeof gsap !== 'undefined') {
        // Hero section animation
        gsap.from('.hero-content h1', {
            duration: 1,
            y: 50,
            opacity: 0,
            ease: 'power3.out'
        });

        gsap.from('.hero-content p', {
            duration: 1,
            y: 30,
            opacity: 0,
            delay: 0.3,
            ease: 'power3.out'
        });

        gsap.from('.hero-content .flex', {
            duration: 1,
            y: 30,
            opacity: 0,
            delay: 0.6,
            ease: 'power3.out'
        });

        // Menu items animation
        gsap.registerPlugin(ScrollTrigger);
        
        gsap.utils.toArray('.menu-item').forEach((item, index) => {
            gsap.from(item, {
                duration: 0.8,
                y: 50,
                opacity: 0,
                delay: index * 0.1,
                ease: 'power3.out',
                scrollTrigger: {
                    trigger: item,
                    start: 'top 80%',
                    end: 'bottom 20%',
                    toggleActions: 'play none none reverse'
                }
            });
        });
    }
}

// Animate counter
function animateCounter(element) {
    const target = parseInt(element.getAttribute('data-target'));
    const duration = 2000;
    const step = target / (duration / 16);
    let current = 0;

    const timer = setInterval(() => {
        current += step;
        if (current >= target) {
            current = target;
            clearInterval(timer);
        }
        element.textContent = Math.floor(current).toLocaleString();
    }, 16);
}

// Initialize modals
function initializeModals() {
    // Menu choice modal functionality
    window.showMenuChoice = function() {
        const modal = document.createElement('div');
        modal.className = 'modal show';
        modal.innerHTML = `
            <div class="modal-content">
                <h3 class="text-2xl font-bold mb-6 gradient-text">Choose Your Menu</h3>
                <p class="text-gray-300 mb-8">What would you like to explore?</p>
                <div class="flex flex-col space-y-4">
                    <button onclick="navigateToMenu('food')" class="px-8 py-3 bg-primary text-white rounded-button hover:bg-opacity-90 transition-all font-medium">
                        <i class="ri-restaurant-line mr-2"></i>Food Menu
                    </button>
                    <button onclick="navigateToMenu('drinks')" class="px-8 py-3 bg-secondary text-white rounded-button hover:bg-opacity-90 transition-all font-medium">
                        <i class="ri-cup-line mr-2"></i>Drinks Menu
                    </button>
                    <button onclick="closeModal()" class="px-8 py-3 bg-gray-600 text-white rounded-button hover:bg-gray-500 transition-all font-medium">
                        Cancel
                    </button>
                </div>
            </div>
        `;
        
        document.body.appendChild(modal);
        document.body.style.overflow = 'hidden';
        
        // Close modal when clicking outside
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                closeModal();
            }
        });
    };

    window.navigateToMenu = function(type) {
        closeModal();
        // Add page transition effect
        const transition = document.createElement('div');
        transition.className = 'page-transition active';
        document.body.appendChild(transition);
        
        setTimeout(() => {
            if (type === 'food') {
                window.location.href = 'food-menu.html';
            } else {
                window.location.href = 'drinks-menu.html';
            }
        }, 250);
    };

    window.closeModal = function() {
        const modal = document.querySelector('.modal');
        if (modal) {
            modal.classList.remove('show');
            setTimeout(() => {
                modal.remove();
                document.body.style.overflow = 'auto';
            }, 300);
        }
    };
}

// Tab functionality for menu sections
function initializeTabs() {
    const tabButtons = document.querySelectorAll('.tab-button');
    const tabContents = document.querySelectorAll('.tab-content');

    tabButtons.forEach(button => {
        button.addEventListener('click', function() {
            const tabId = this.getAttribute('data-tab');
            
            // Remove active class from all buttons
            tabButtons.forEach(btn => btn.classList.remove('active'));
            
            // Add active class to clicked button
            this.classList.add('active');
            
            // Hide all tab contents
            tabContents.forEach(content => content.classList.add('hidden'));
            
            // Show selected tab content
            const targetContent = document.getElementById(`${tabId}-tab`);
            if (targetContent) {
                targetContent.classList.remove('hidden');
            }
        });
    });
}

// Initialize tabs when DOM is loaded
document.addEventListener('DOMContentLoaded', function() {
    initializeTabs();
});
// Menu Choice Modal Functions
function showMenuChoice() {
    const modal = document.getElementById('menu-choice-modal');
    if (modal) {
        modal.classList.remove('hidden');
        setTimeout(() => {
            const content = modal.querySelector('.relative');
            if (content) {
                content.classList.remove('scale-95');
                content.classList.add('scale-100');
            }
        }, 10);
    }
}

function closeMenuChoice() {
    const modal = document.getElementById('menu-choice-modal');
    if (modal) {
        const content = modal.querySelector('.relative');
        if (content) {
            content.classList.remove('scale-100');
            content.classList.add('scale-95');
        }
        setTimeout(() => {
            modal.classList.add('hidden');
        }, 300);
    }
}

function redirectToMenu(type) {
    closeMenuChoice();
    setTimeout(() => {
        if (type === 'food') {
            window.location.href = 'food-menu.html';
        } else if (type === 'drinks') {
            window.location.href = 'drinks-menu.html';
        }
    }, 300);
}

// Enhanced Add to Cart functionality
function setupAddToCartButtons() {
    // Update old button classes to new enhanced style
    const oldButtons = document.querySelectorAll('.add-to-cart');
    oldButtons.forEach(button => {
        button.className = 'add-to-cart-btn w-full py-2 bg-primary hover:bg-opacity-90 text-white rounded-button transition-all font-medium';
    });

    // Add event listeners to all add-to-cart buttons
    const addToCartButtons = document.querySelectorAll('.add-to-cart-btn');
    addToCartButtons.forEach(button => {
        button.addEventListener('click', function() {
            const itemData = {
                id: this.getAttribute('data-id'),
                name: this.getAttribute('data-name'),
                price: parseFloat(this.getAttribute('data-price')),
                image: this.getAttribute('data-image'),
                quantity: 1
            };
            
            addToCartEnhanced(itemData);
            showAddToCartAlert(itemData.name);
            animateButton(this);
        });
    });
}

function addToCartEnhanced(item) {
    const existingItem = cart.find(cartItem => cartItem.id === item.id);
    if (existingItem) {
        existingItem.quantity += 1;
    } else {
        cart.push(item);
    }
    updateCartDisplay();
    updateCartCount();
    saveCartToStorage();
}

function showAddToCartAlert(itemName) {
    const alert = document.createElement('div');
    alert.className = 'fixed top-20 right-4 bg-green-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300';
    alert.innerHTML = `
        <div class="flex items-center space-x-3">
            <i class="ri-check-line ri-lg"></i>
            <span>${itemName} added to cart!</span>
        </div>
    `;
    
    document.body.appendChild(alert);
    
    setTimeout(() => {
        alert.classList.remove('translate-x-full');
    }, 10);
    
    setTimeout(() => {
        alert.classList.add('translate-x-full');
        setTimeout(() => {
            if (document.body.contains(alert)) {
                document.body.removeChild(alert);
            }
        }, 300);
    }, 3000);
}

function animateButton(button) {
    button.style.transform = 'scale(0.95)';
    setTimeout(() => {
        button.style.transform = 'scale(1)';
    }, 150);
}

// Make functions globally available
window.showMenuChoice = showMenuChoice;
window.closeMenuChoice = closeMenuChoice;
window.redirectToMenu = redirectToMenu;